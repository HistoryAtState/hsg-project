<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." name="HsgProject" default="all" xmlns:xdb="http://exist-db.org/ant">
    <property file="local.build.properties"/>
    <property file="build.properties"/>

    <property name="repos" value="repos"/>
    <!-- use "xars" unless called with a "repo-name" property -->
    <condition property="xars" value="${repo-name}" else="xars">
        <isset property="repo-name"/>
    </condition>
    <property name="instance.tempColl" value="hsg-temp"/>
    <property name="instance.tempPath" value="/db/${instance.tempColl}"/>
    <property name="local.instance.temp" value="${local.instance.uri}${instance.tempPath}"/>
    <property name="production.instance.temp" value="${production.instance.uri}${instance.tempPath}"/>
    <property name="libs" value="./lib"/>

    <available file="${libs}/ivy-${ivy.version}.jar" property="ivy.available"/>

    <target name="all" depends="clean,update,build,deploy" description="Clean, update, build, and deploy all packages (assumes 'setup' has already been run)"/>
    
    <condition property="remotes.include-private">
        <istrue value="${remotes.include-private}"/>
    </condition>

    <target name="clone-private-repos" if="${remotes.include-private}" description="Clone private packages">
        <echo message="Cloning private packages into ${repos}..."/>
        <foreach property="remotes.private" target="git.clone"/>
    </target>
    
    <target name="clone-public-repos">
        <echo message="Cloning required packages into ${repos}..." description="Clone public packages"/>
        <foreach property="remotes" target="git.clone"/>
    </target>

    <target name="setup" depends="prepare,clone-public-repos,clone-private-repos" description="Clone required packages">
        <echo message="Completed cloning of packages..."/>
    </target>

    <target name="build" depends="prepare" description="Build all packages">
        <iterate target="build-xar"/>
    </target>

    <target name="deploy" description="Deploy all packages" depends="ivy.download,deploy.init,deploy.upload,deploy.install-packages-from-public-repo,deploy.deploy,deploy.cleanup"/>

    <target name="deploy-one" description="Deploy one package" depends="ivy.download,deploy.init,deploy.upload-one,deploy.deploy-xar,deploy.cleanup"/>

    <target name="prepare">
        <mkdir dir="${libs}"/>
        <mkdir dir="${xars}"/>
        <mkdir dir="${repos}"/>
    </target>

    <target name="update" depends="prepare">
        <iterate target="git.pull"/>
    </target>

    <target name="update-one" depends="prepare">
        <antcall target="git.pull">
            <param name="dir" value="repos/${repo-name}"/>
        </antcall>
    </target>

    <target name="deploy.init">
        <path id="exist.classpath">
            <fileset dir="${libs}">
                <include name="*.jar"/>
            </fileset>
        </path>

        <typedef resource="org/exist/ant/antlib.xml" uri="http://exist-db.org/ant">
            <classpath refid="exist.classpath"/>
        </typedef>
        <typedef resource="net/sf/antcontrib/antlib.xml">
            <classpath refid="exist.classpath"/>
        </typedef>
    </target>

    <target name="deploy.upload">
        <echo message="Uploading packages ..."/>
        <xdb:store uri="${local.instance.temp}" user="${local.instance.user}" password="${local.instance.password}"
                   createcollection="true">
            <fileset dir="${xars}">
                <include name="*.xar"/>
            </fileset>
        </xdb:store>
    </target>

    <target name="deploy.upload-one">
        <property name="repo-name" value="${repo-name}"/>
        <echo message="Uploading package ${repo-name} ..."/>
        <xdb:store uri="${local.instance.temp}" user="${local.instance.user}" password="${local.instance.password}"
            createcollection="true">
            <fileset dir="repos/${repo-name}/build">
                <include name="*.xar"/>
            </fileset>
        </xdb:store>
    </target>
    
    <target name="deploy.upload-one-to-production">
        <property name="repo-name" value="${repo-name}"/>
        <echo message="Uploading package ${repo-name} ..."/>
        <xdb:store uri="${production.instance.temp}" user="${production.instance.user}" password="${production.instance.password}"
            createcollection="true" ssl="true">
            <fileset dir="repos/${repo-name}/build">
                <include name="*.xar"/>
            </fileset>
        </xdb:store>
    </target>

    <target name="deploy.deploy">
        <echo message="Installing packages ..."/>
        <iterate-xars target="deploy.deploy-xar"/>
    </target>

    <target name="deploy.install-packages-from-public-repo">
        <echo message="Installing packages from eXist-db.org public repo ..."/>
        <echo message="Installing monex ..."/>
        <xdb:xquery uri="${local.instance.temp}" user="${local.instance.user}" password="${local.instance.password}"
                    query="repo:install-and-deploy('http://exist-db.org/apps/monex', '0.9.3', 'http://demo.exist-db.org/exist/apps/public-repo/modules/find.xql')"/>
        <echo message="Installing functx ..."/>
        <xdb:xquery uri="${local.instance.temp}" user="${local.instance.user}" password="${local.instance.password}"
            query="repo:install-and-deploy('http://www.functx.com', 'http://demo.exist-db.org/exist/apps/public-repo/modules/find.xql')"/>
    </target>

    <target name="deploy.deploy-xar">
        <echo message="Deploying xar ${xar}"/>
        <xdb:xquery uri="${local.instance.temp}" user="${local.instance.user}" password="${local.instance.password}"
                    queryFile="scripts/deploy.xql" outputproperty="deploy.output">
            <variable name="temp" value="${instance.tempPath}"/>
            <variable name="xar" value="${xar}"/>
        </xdb:xquery>
        <echo message="${deploy.output}"/>
    </target>

    <target name="deploy.deploy-xar-to-production">
        <echo message="Deploying xar ${xar}"/>
        <xdb:xquery uri="${production.instance.temp}" user="${production.instance.user}" password="${production.instance.password}"
            queryFile="scripts/deploy.xql" outputproperty="deploy.output" ssl="true">
            <variable name="temp" value="${instance.tempPath}"/>
            <variable name="xar" value="${xar}"/>
        </xdb:xquery>
        <echo message="${deploy.output}"/>
    </target>

    <target name="deploy.cleanup">
        <echo message="Removing temporary collection ..."/>
        <xdb:remove uri="${local.instance.temp}" user="${local.instance.user}" password="${local.instance.password}"
            collection="${instance.tempPath}"/>
    </target>

    <target name="deploy.cleanup-production">
        <echo message="Removing temporary collection ..."/>
        <xdb:remove uri="${production.instance.temp}" user="${production.instance.user}" password="${production.instance.password}"
            collection="${instance.tempPath}"/>
    </target>
    
    <target name="clean" description="Call clean on all package dirs; remove built xars">
        <delete>
            <fileset dir="${xars}">
                <include name="*.xar"/>
            </fileset>
        </delete>
        <subant target="clean" failonerror="false">
            <fileset dir=".">
                <include name="${repos}/*/build.xml"/>
            </fileset>
        </subant>
    </target>

    <target name="clean-all" depends="clean" description="Clean everything, including libs">
        <delete dir="${libs}" failonerror="false"/>
        <delete dir="${repos}" failonerror="false"/>
    </target>

    <!-- Called on each directory in repos to build it -->
    <target name="build-xar">
        <echo message="Building ${dir}"/>
        <subant>
            <fileset dir="${dir}">
                <include name="build.xml"/>
            </fileset>
        </subant>
        <copy todir="xars/" failonerror="false">
            <fileset dir="${dir}/build">
                <include name="*.xar"/>
            </fileset>
        </copy>
        <delete dir="${dir}" includes="*.xar"/>
    </target>

    <target name="git.pull">
        <echo message="Updating ${dir}..."/>
        <exec executable="${git}" dir="${dir}">
            <arg line="pull"/>
            <arg line="--recurse-submodules"/>
        </exec>
        <exec executable="${git}" dir="${dir}">
            <arg line="submodule"/>
            <arg line="update"/>
            <arg line="--recursive"/>
        </exec>
    </target>

    <!-- Iterate through directory of repos and call target for each -->
    <scriptdef name="iterate" language="javascript">
        <attribute name="target"/>
        <![CDATA[
            repos = project.getProperty("repos");

            fs = project.createDataType("fileset");
            fs.setDir(new java.io.File(repos));
            fs.setIncludes("*/build.xml");

            ds = fs.getDirectoryScanner(project);
            descriptors = ds.getIncludedFiles();

            var basedir = fs.getDir(project);

            for (i=0; i < descriptors.length; i++) {
              var descriptor = new java.io.File(basedir, descriptors[i]);
              var dir = descriptor.getParent();

              // create and use a Task via Ant API
              antc = project.createTask("antcall");
              var prop = antc.createParam();
              prop.setName("dir");
              prop.setValue(dir);

              antc.setTarget(attributes.get("target"));
              antc.perform();
            }
        ]]>
    </scriptdef>

    <!-- Iterate through directory of xars and call target for each xar -->
    <scriptdef name="iterate-xars" language="javascript">
        <attribute name="target"/>
        <![CDATA[
            xarsDir = project.getProperty("xars");

            fs = project.createDataType("fileset");
            fs.setDir(new java.io.File(xarsDir));
            fs.setIncludes("*.xar");

            ds = fs.getDirectoryScanner(project);
            xars = ds.getIncludedFiles();

            var basedir = fs.getDir(project);

            for (i=0; i < xars.length; i++) {
              // create and use a Task via Ant API
              antc = project.createTask("antcall");
              var prop = antc.createParam();
              prop.setName("xar");
              prop.setValue(xars[i]);

              antc.setTarget(attributes.get("target"));
              antc.perform();
            }
        ]]>
    </scriptdef>

    <scriptdef name="foreach" language="javascript">
        <attribute name="target"/>
        <attribute name="property"/>
        <![CDATA[
            var input = project.getProperty(attributes.get("property"));
            var items = input.split(/\s*,\s*/);
            for (i=0; i < items.length; i++) {
              // create and use a Task via Ant API
              antc = project.createTask("antcall");
              var prop = antc.createParam();
              prop.setName("item");
              prop.setValue(items[i]);

              antc.setTarget(attributes.get("target"));
              antc.perform();
            }
        ]]>
    </scriptdef>

    <target name="ivy.setup" description="Download the Ivy dependency manager" unless="ivy.available">
        <echo>${ivy_url}</echo>
        <get src="${ivy_url}" dest="${libs}"/>
    </target>

    <target name="ivy.download" depends="prepare,ivy.setup"
            description="Download eXist JAR files required for deployment" xmlns:ivy="antlib:org.apache.ivy.ant">
        <!-- Setup IVY download manager -->
        <path id="ivy.lib.path">
            <fileset dir="${libs}" includes="ivy*.jar" erroronmissingdir="false"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
        <ivy:retrieve sync="true" pattern="${libs}/[artifact]-[revision](-[classifier]).[ext]"/>
    </target>

    <target name="git.clone">
        <echo message="Cloning ${item}..."/>
        <exec executable="${git}" outputproperty="git.output" dir="${repos}">
            <arg line="clone"/>
            <arg line="--recursive"/>
            <arg line="${item}"/>
        </exec>
        <echo message="${git.output}"/>
    </target>

    <target name="test">
        <ant antfile="repos/hsg-test/build.xml" target="test" useNativeBasedir="true"/>
    </target>

    <!-- ================================================= -->
    <!-- Targets for uploading files from oXygen to the db -->
    <!-- ================================================= -->

    <target name="upload-file-to-localhost" description="Upload a file from an hsg-project repo to eXist-db on localhost" depends="deploy.init">
        <property name="parent-directory" value="${arg1}"/>
        <property name="file-name" value="${arg2}"/>
        <property name="file-path" value="${parent-directory}/${file-name}"/>
        <echo message="Uploading ${file-name} from ${parent-directory} to eXist-db localhost"/>
        <path id="parent-dir">
            <pathelement path="${parent-directory}"/>
        </path>
        <fileset file="${file-path}" id="file"/>
        <pathconvert targetos="unix" property="file-path.unix" refid="parent-dir">
            <map from="c:" to=""/>
        </pathconvert>
        <condition property="is-hsg-project-repo">
            <contains string="${file-path.unix}" substring="/hsg-project/repos/" />
        </condition>
        <fail message="ERROR: The directory ${parent-directory} is not an hsg-project repo" unless="${is-hsg-project-repo}"/>
        <condition property="is-hsg-staging-repo">
            <contains string="${file-path.unix}" substring="/hsg-project/repos/hsg-staging" />
        </condition>
        <propertyregex property="target-collection" input="${file-path.unix}"
            regexp=".*?/hsg-project/repos/(hsg-staging/)?(.*)"
            select="/db/apps/\2"
            defaultvalue="Error"
            override="true"/>
        <property name="target-xmldb-collection-uri" value="${local.instance.uri}${target-collection}"/>
        <xdb:store user="${local.instance.user}" password="${local.instance.password}"
            uri="${target-xmldb-collection-uri}" createcollection="true" createsubcollections="true">
            <fileset refid="file"/>
        </xdb:store>
    </target>

    <target name="upload-file-to-production" description="Upload a file from an hsg-project repo to eXist-db on history.state.gov" depends="deploy.init">
        <property name="parent-directory" value="${arg1}"/>
        <property name="file-name" value="${arg2}"/>
        <property name="file-path" value="${parent-directory}/${file-name}"/>
        <echo message="Uploading ${file-name} from ${parent-directory} to eXist-db on history.state.gov"/>
        <path id="parent-dir">
            <pathelement path="${parent-directory}"/>
        </path>
        <fileset file="${file-path}" id="file"/>
        <pathconvert targetos="unix" property="file-path.unix" refid="parent-dir">
            <map from="c:" to=""/>
        </pathconvert>
        <condition property="is-hsg-project-repo">
            <contains string="${file-path.unix}" substring="/hsg-project/repos/" />
        </condition>
        <fail message="ERROR: The directory ${parent-directory} is not an hsg-project repo" unless="${is-hsg-project-repo}"/>
        <condition property="is-hsg-staging-repo">
            <contains string="${file-path.unix}" substring="/hsg-project/repos/hsg-staging" />
        </condition>
        <fail message="ERROR: The directory ${parent-directory} is part of the hsg-staging repo and cannot be uploaded to the production server" if="${is-hsg-staging-repo}"/>
        <propertyregex property="target-collection" input="${file-path.unix}"
            regexp=".*?/hsg-project/repos/(.*)"
            select="/db/apps/\1"
            defaultvalue="Error"
            override="true"/>
        <property name="target-xmldb-collection-uri" value="${production.instance.uri}${target-collection}"/>
        <xdb:store user="${production.instance.user}" password="${production.instance.password}"
            uri="${target-xmldb-collection-uri}" ssl="true" createcollection="true" createsubcollections="true">
            <fileset refid="file"/>
        </xdb:store>
    </target>
    
    <target name="delete-file-from-localhost" description="Delete a file from an hsg-project repo from eXist-db on localhost" depends="deploy.init">
        <property name="parent-directory" value="${arg1}"/>
        <property name="file-name" value="${arg2}"/>
        <property name="file-path" value="${parent-directory}/${file-name}"/>
        <echo message="Deleting ${file-name} from ${parent-directory} on eXist-db localhost"/>
        <path id="parent-dir">
            <pathelement path="${parent-directory}"/>
        </path>
        <fileset file="${file-path}" id="file"/>
        <pathconvert targetos="unix" property="file-path.unix" refid="parent-dir">
            <map from="c:" to=""/>
        </pathconvert>
        <condition property="is-hsg-project-repo">
            <contains string="${file-path.unix}" substring="/hsg-project/repos/" />
        </condition>
        <fail message="ERROR: The directory ${parent-directory} is not an hsg-project repo" unless="${is-hsg-project-repo}"/>
        <propertyregex property="target-collection" input="${file-path.unix}"
            regexp=".*?/hsg-project/repos/(hsg-staging/)?(.*)"
            select="/db/apps/\2"
            defaultvalue="Error"
            override="true"/>
        <property name="target-xmldb-collection-uri" value="${local.instance.uri}${target-collection}"/>
        <xdb:remove user="${local.instance.user}" password="${local.instance.password}"
            uri="${target-xmldb-collection-uri}" resource="${file-name}"/>
    </target>

    <target name="delete-file-from-production" description="Delete a file from an hsg-project repo from eXist-db on history.state.gov" depends="deploy.init">
        <property name="parent-directory" value="${arg1}"/>
        <property name="file-name" value="${arg2}"/>
        <property name="file-path" value="${parent-directory}/${file-name}"/>
        <echo message="Deleting ${file-name} from ${parent-directory} on eXist-db localhost"/>
        <path id="parent-dir">
            <pathelement path="${parent-directory}"/>
        </path>
        <fileset file="${file-path}" id="file"/>
        <pathconvert targetos="unix" property="file-path.unix" refid="parent-dir">
            <map from="c:" to=""/>
        </pathconvert>
        <condition property="is-hsg-project-repo">
            <contains string="${file-path.unix}" substring="/hsg-project/repos/" />
        </condition>
        <fail message="ERROR: The directory ${parent-directory} is not an hsg-project repo" unless="${is-hsg-project-repo}"/>
        <condition property="is-hsg-staging-repo">
            <contains string="${file-path.unix}" substring="/hsg-project/repos/hsg-staging" />
        </condition>
        <fail message="ERROR: The directory ${parent-directory} is part of the hsg-staging repo and cannot be uploaded to the production server" if="${is-hsg-staging-repo}"/>
        <propertyregex property="target-collection" input="${file-path.unix}"
            regexp=".*?/hsg-project/repos/(.*)"
            select="/db/apps/\1"
            defaultvalue="Error"
            override="true"/>
        <property name="target-xmldb-collection-uri" value="${production.instance.uri}${target-collection}"/>
        <xdb:remove user="${production.instance.user}" password="${production.instance.password}"
            uri="${target-xmldb-collection-uri}" resource="${file-name}" ssl="true"/>
    </target>
    
    <target name="update-repo" description="Fetch updates for the parent repo of a file (from an hsg-project repo)" depends="ivy.download,deploy.init">
        <property name="parent-directory" value="${arg1}"/>
        <path id="parent-dir">
            <pathelement path="${parent-directory}"/>
        </path>
        <pathconvert targetos="unix" property="file-path.unix" refid="parent-dir">
            <map from="c:" to=""/>
        </pathconvert>
        <condition property="is-hsg-project-repo">
            <contains string="${file-path.unix}" substring="/hsg-project/repos/" />
        </condition>
        <fail message="ERROR: The directory ${parent-directory} is not an hsg-project repo" unless="${is-hsg-project-repo}"/>
        <propertyregex property="repo-name" input="${file-path.unix}"
            regexp=".*/hsg-project/repos/([^/]+)"
            select="\1"
            defaultvalue="Error"
            override="true"/>
        <antcall target="git.pull">
            <param name="dir" value="repos/${repo-name}"/>
        </antcall>
    </target>
    
    <target name="update-hsg-project" description="Updates the hsg-project repo">
        <property name="project-directory" value="${arg1}"/>
        <path id="project-dir">
            <pathelement path="${project-directory}"/>
        </path>
        <pathconvert targetos="unix" property="file-path.unix" refid="project-dir">
            <map from="c:" to=""/>
        </pathconvert>
        <condition property="is-hsg-project-repo">
            <contains string="${file-path.unix}" substring="/hsg-project" />
        </condition>
        <fail message="ERROR: The directory ${project-directory} is not the hsg-project repo" unless="${is-hsg-project-repo}"/>
        <echo message="Updating hsg-project..."/>
        <exec executable="${git}" dir="${file-path.unix}">
            <arg line="checkout"/>
            <arg line="HEAD"/>
            <arg line="--"/>
            <arg line="hsg-project.xpr"/>
        </exec>
        <exec executable="${git}" dir="${file-path.unix}">
            <arg line="pull"/>
        </exec>
    </target>

    <target name="deploy-repo-to-localhost" description="Packages and deploys the parent repo of a file (from an hsg-project repo) to eXist-db on localhost" depends="ivy.download,deploy.init">
        <property name="parent-directory" value="${arg1}"/>
        <path id="parent-dir">
            <pathelement path="${parent-directory}"/>
        </path>
        <pathconvert targetos="unix" property="file-path.unix" refid="parent-dir">
            <map from="c:" to=""/>
        </pathconvert>
        <condition property="is-hsg-project-repo">
            <contains string="${file-path.unix}" substring="/hsg-project/repos/" />
        </condition>
        <fail message="ERROR: The directory ${parent-directory} is not an hsg-project repo" unless="${is-hsg-project-repo}"/>
        <condition property="is-hsg-staging-repo">
            <contains string="${file-path.unix}" substring="/hsg-project/repos/hsg-staging" />
        </condition>
        <fail message="ERROR: The directory ${parent-directory} is part of the hsg-staging repo and cannot be deployed" if="${is-hsg-staging-repo}"/>
        <propertyregex property="repo-name" input="${file-path.unix}"
            regexp=".*/hsg-project/repos/([^/]+)"
            select="\1"
            defaultvalue="Error"
            override="true"/>
        <echo>repo-name: ${repo-name}</echo>
        <subant>
            <fileset dir="repos/${repo-name}">
                <include name="build.xml"/>
            </fileset>
        </subant>
        <antcall target="deploy.upload-one"/>
        <path id="xar-path">
            <fileset dir="repos/${repo-name}/build">
                <include name="*.xar"/>
            </fileset>
        </path>
        <property name="xar-path" refid="xar-path"/>
        <basename property="xar" file="${xar-path}"/>
        <antcall target="deploy.deploy-xar">
            <param name="xar" value="${xar}"/>
        </antcall>
        <antcall target="deploy.cleanup"/>
    </target>
    
    <target name="deploy-repo-to-production" description="Packages and deploys the parent repo of a file (from an hsg-project repo) to eXist-db on history.state.gov" depends="ivy.download,deploy.init">
        <property name="parent-directory" value="${arg1}"/>
        <!-- for hsg-shell's npm start process, we need to pass NODE_ENV=production -->
        <property name="NODE_ENV" value="production"/>
        <path id="parent-dir">
            <pathelement path="${parent-directory}"/>
        </path>
        <pathconvert targetos="unix" property="file-path.unix" refid="parent-dir">
            <map from="c:" to=""/>
        </pathconvert>
        <condition property="is-hsg-project-repo">
            <contains string="${file-path.unix}" substring="/hsg-project/repos/" />
        </condition>
        <fail message="ERROR: The directory ${parent-directory} is not an hsg-project repo" unless="${is-hsg-project-repo}"/>
        <condition property="is-hsg-staging-repo">
            <contains string="${file-path.unix}" substring="/hsg-project/repos/hsg-staging" />
        </condition>
        <fail message="ERROR: The directory ${parent-directory} is part of the hsg-staging repo and cannot be deployed" if="${is-hsg-staging-repo}"/>
        <propertyregex property="repo-name" input="${file-path.unix}"
            regexp=".*/hsg-project/repos/([^/]+)"
            select="\1"
            defaultvalue="Error"
            override="true"/>
        <echo>repo-name: ${repo-name}</echo>
        <subant>
            <fileset dir="repos/${repo-name}">
                <include name="build.xml"/>
            </fileset>
        </subant>
        <antcall target="deploy.upload-one-to-production"/>
        <path id="xar-path">
            <fileset dir="repos/${repo-name}/build">
                <include name="*.xar"/>
            </fileset>
        </path>
        <property name="xar-path" refid="xar-path"/>
        <basename property="xar" file="${xar-path}"/>
        <antcall target="deploy.deploy-xar-to-production">
            <param name="xar" value="${xar}"/>
        </antcall>
        <antcall target="deploy.cleanup-production"/>
    </target>

    <target name="open-repo-in-github-desktop" description="Opens an hsg-project repo in oXygen XML Editor" depends="deploy.init">
        <property name="parent-directory" value="${arg1}"/>
        <path id="parent-dir">
            <pathelement path="${parent-directory}"/>
        </path>
        <pathconvert targetos="unix" property="file-path.unix" refid="parent-dir">
            <map from="c:" to=""/>
        </pathconvert>
        <propertyregex property="repo-basepath" input="${file-path.unix}"
            regexp="(.*?/hsg-project/repos/[^/]*)"
            select="\1"
            defaultvalue="ERROR"
            override=""/>
        <fail message="ERROR: The directory ${file-path.unix} is not an hsg-project repo">
            <condition>
                <equals arg1="${repo-basepath}" arg2="ERROR"/>
            </condition>
        </fail>
        <exec executable="${github}" dir="${repo-basepath}">
            <arg line="."/>
        </exec>
    </target>
    
    <target name="open-repo-in-atom" description="Opens an hsg-project repo in Atom" depends="deploy.init">
        <property name="parent-directory" value="${arg1}"/>
        <path id="parent-dir">
            <pathelement path="${parent-directory}"/>
        </path>
        <pathconvert targetos="unix" property="file-path.unix" refid="parent-dir">
            <map from="c:" to=""/>
        </pathconvert>
        <propertyregex property="repo-basepath" input="${file-path.unix}"
            regexp="(.*?/hsg-project/repos/[^/]*)"
            select="\1"
            defaultvalue="ERROR"
            override=""/>
        <fail message="ERROR: The directory ${file-path.unix} is not an hsg-project repo">
            <condition>
                <equals arg1="${repo-basepath}" arg2="ERROR"/>
            </condition>
        </fail>
        <propertyregex property="repo" input="${file-path.unix}"
            regexp=".*?/hsg-project/repos/([^/]*)"
            select="\1"
            override=""/>
        <copy file="atom-existdb_tmpl.json" tofile="${repo-basepath}/.existdb.json" overwrite="yes"/>
        <replace file="${repo-basepath}/.existdb.json" token="@@@" value="${repo}"/>
        <exec executable="open" dir="${repo-basepath}">
            <arg line="-a"/>
            <arg line="Atom"/>
            <arg line="."/>
        </exec>
    </target>

    <!-- =================================================================== -->
    <!-- Wipe eXist-db database; perform only with eXist-db shut down        -->
    <!-- =================================================================== -->
    <target name="wipe-exist-data" description="Wipe eXist data">
        <condition property="exist-running">
            <http requestmethod="GET" url="http://localhost:8080/exist/status"/>
        </condition>
        <fail if="${exist-running}"
            message="eXist is still running. Please shut down eXist and try again."/>
        <echo message="-------------------------"/>
        <echo message="Wiping eXist data"/>
        <echo message="-------------------------"/>
        <delete dir="${eXist.data}/backup"/>
        <delete dir="${eXist.data}/expathrepo"/>
        <delete dir="${eXist.data}/fs"/>
        <delete dir="${eXist.data}/fs.journal"/>
        <delete dir="${eXist.data}/journal"/>
        <delete dir="${eXist.data}/lucene"/>
        <delete dir="${eXist.data}/range"/>
        <delete dir="${eXist.data}/sanity"/>
        <delete>
            <fileset dir="${eXist.data}" includes="*.dbx,*.log,*.lck,spatial_index.*,counters,restxq.registry"
                excludes=".DO_NOT_DELETE"/>
        </delete>
    </target>
    
    <target name="prepare-local-build-properties" description="Create a local copy of build.properties and supply with needed information">
        <copy file="build.properties" tofile="local.build.properties" overwrite="yes"/>
        <property name="arg1" value="${arg1}"/>
        <property name="arg2" value="${arg2}"/>
        <property name="arg3" value="${arg3}"/>
        <propertyfile
            file="local.build.properties"
            comment="hsg settings for ${arg3}">
            <entry key="production.instance.password" value="${arg1}"/>
            <entry key="remotes.include-private" value="${arg2}"/>
            <!--<entry operation="+" key="remotes" value=",${remotes.private}"/>-->
            <entry key="eXist.data" value="${arg3}/Library/Application Support/org.exist"/>
        </propertyfile>
        
    </target>
    
</project>
